[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "test"
version = "0.1.1.dev"
description = "MeteoForecast is library to get weather forecast data from Polish service meteo.pl."
requires-python = ">=3.11"
authors = [
    {name = "Piotr Gawron", email = "dev@gawron.biz"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["weather", "forecast", "meteo", "weather-data", "weather-api", "weather-api-client"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Home Automation",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
dependencies = [
    "pyproj>=3.7.1",
    "pytz>=2025.2",
    "requests>=2.32.3",
]

[dependency-groups]
dev = [
    "flake8>=7.2.0",
    "flake8-pyproject>=1.2.3",
    "isort>=6.0.1",
    "pylint>=3.3.7",
    "pytest>=8.4.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/gawronpio/MeteoForecast"
Repository = "https://github.com/gawronpio/MeteoForecast.git"
Issues = "https://github.com/gawronpio/MeteoForecast/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["meteo_forecast*"]

[tool.setuptools.package-data]
meteo_forecast = ["*.py"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers --cov=meteo_forecast --cov-report=term --cov-report=html"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "functional: Functional tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
]

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true

[tool.pylint.main]
suggestion-mode = true
py-version = "3.11"
ignore = [
    'venv',
    '.venv',
    'htmlcov',
    '__pycache__',
    'build',
    'dist',
]

[tool.pylint.messages_control]
disable = [
    'line-too-long',
    'import-outside-toplevel',
    'use-dict-literal',
    'no-name-in-module',
    'c-extension-no-member',
    'import-error',
    'too-many-arguments',
    'too-many-locals',
    'too-many-branches',
    'too-many-instance-attributes',
]

[tool.flake8]
ignore = [
    'E402',  # Module level import not at top of file
    'E501',  # Line too long (82 > 79 characters)
    'E722',  # Do not use bare except, specify exception instead
    'W503',  # Line break before binary operator
    'W504',  # Line break after binary operator
]
exclude = [
    'venv',
    '.venv',
    'htmlcov',
    '__pycache__',
    'build',
    'dist',
]
count = true

